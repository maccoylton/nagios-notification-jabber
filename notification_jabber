#!/usr/bin/env python

# -*- coding: utf-8 -*-
#
#
# notification_jabber
# Copyright (C) 2011  vint21h.pp.ua
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

try:
    import sys
    import os
    import ConfigParser
    from optparse import OptionParser
    import xmpp
except ImportError, err:
    print "ERROR: Couldn't load module. %s" % (err)
    sys.exit(0)

# versioning
__author__ = "vINT 21h <vint21h@vint21h.pp.ua>"
__version__ = "0.1"

# global variables
INI = "notification_jabber.ini"


def parsecmdline(args):
    """
    Commandline options arguments parsing
    """
    version = "%%prog %s" % (__version__)
    parser = OptionParser(version=version)
    parser.add_option("-r", "--recepient", action="store", dest="recepient",
                                        default="", metavar="RECEPIENT",
                                        help="message recepient jabber ID")
    parser.add_option("-m", "--message", metavar="MESSAGE", action="store",
                                        type="string", dest="message",
                                        default="", help="a message to send")
    parser.add_option("-c", "--config", metavar="CONFIG", action="store",
                                        type="string", dest="config",
                                        help="config file path")

    return parser.parse_args(args)


def checkconfigfile(ini):
    """
    Check config exist
    """
    if os.path.exists(ini):
        configini = ini
        return configini
    elif os.path.exists(os.path.join("/etc", ini)):
        configini = os.path.join("/etc", ini)
        return configini
    elif os.path.exists(os.path.join(os.getcwd(), ini)):
        configini = os.path.join(os.getcwd(), ini)
        return configini
    else:
        print "ERROR: Config file %s don't exist" % (ini)
        sys.exit(0)


def parseconfig(configini):
    """
    Get connection settings from config file
    """
    config = ConfigParser.ConfigParser()
    try:
        config.read(configini)
    except Exception, err:
        print "ERROR: Read config file %s error." % (configini)
        sys.exit(0)
    configdata = {
                    'server': config.get('Jabber', 'server'),
                    'login': config.get('Jabber', 'login'),
                    'password': config.get('Jabber', 'password'),
                    'resource': config.get('Jabber', 'resource'),
    }
    return configdata


def sendmessage(config, recepient, message):
    """
    Connect to server and send message
    """
    client = xmpp.Client(config['server'], debug=[])
    try:
        client.connect(server=(config['server'], 5222))
        client.auth(config['login'], config['password'], config['resource'])
        client.sendInitPresence()
    except Exception, err:
        print "ERROR: Couldn't connect or auth on server. %s" % (err)
        sys.exit(0)
    xmessage = xmpp.Message(recepient, message)
    xmessage.setAttr('type', 'chat')
    try:
        client.send(xmessage)
    except Exception, err:
        print "ERROR: Couldn't send message. %s" % (err)


if __name__ == "__main__":
    (OPTIONS, args) = parsecmdline(sys.argv)
    if OPTIONS.config != None:
        INI = OPTIONS.config
    DATA = parseconfig(checkconfigfile(INI))
    print DATA
    print OPTIONS.recepient
    print OPTIONS.message
    sendmessage(DATA, OPTIONS.recepient, OPTIONS.message)
